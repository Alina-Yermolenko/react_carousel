{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","itemOffset","clickNext","props","itemWidth","images","infinite","frameSize","step","imagesToHide","length","setState","Math","abs","clickPrev","this","animationDuration","className","style","width","transform","transition","map","image","i","src","alt","String","onClick","type","React","Component","App","value","newState","htmlFor","onChange","event","updateInputValue","target","min","max","placeholder","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.580e8662.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n  itemWidth: number,\n};\ntype State = {\n  itemOffset: number,\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    itemOffset: 0,\n  };\n\n  clickNext = () => {\n    const {\n      itemWidth, images, infinite, frameSize,\n    } = this.props;\n    let { step } = this.props;\n    const { itemOffset } = this.state;\n    const imagesToHide = (images.length - frameSize) * itemWidth;\n\n    if ((itemOffset / itemWidth) - step >= -(images.length - frameSize)) {\n      this.setState({ itemOffset: itemOffset - (itemWidth * step) });\n\n      return;\n    }\n\n    step = (imagesToHide - Math.abs(itemOffset)) / itemWidth;\n    this.setState({ itemOffset: itemOffset - (itemWidth * step) });\n    if (infinite\n      && Math.abs(itemOffset) >= itemWidth * (images.length - frameSize)) {\n      this.setState({ itemOffset: 0 });\n    }\n  };\n\n  clickPrev = () => {\n    const {\n      itemWidth, images, infinite, frameSize,\n    } = this.props;\n    let { step } = this.props;\n    const { itemOffset } = this.state;\n    const imagesToHide = (images.length - frameSize) * itemWidth;\n\n    if (imagesToHide - Math.abs(itemOffset) <= itemWidth * step) {\n      this.setState({ itemOffset: itemOffset + (itemWidth * step) });\n\n      return;\n    }\n\n    step = Math.abs(0 - Math.abs(itemOffset) / itemWidth);\n    this.setState({ itemOffset: itemOffset + (itemWidth * step) });\n\n    if (infinite && itemOffset === 0) {\n      this.setState({\n        itemOffset: -(itemOffset + ((images.length - frameSize) * itemWidth)),\n      });\n    }\n  };\n\n  render() {\n    const { itemOffset } = this.state;\n    const {\n      itemWidth, images, frameSize, animationDuration,\n    } = this.props;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={{ width: `${itemWidth * frameSize}px` }}\n      >\n\n        <ul\n          className=\"Carousel__list\"\n          style={{ transform: `translateX(${itemOffset}px)`, transition: `${animationDuration}ms` }}\n        >\n          {images.map((image: string, i: number) => {\n            return (\n              <li className=\"Carousel__item\" key={image}>\n                <img\n                  width={itemWidth}\n                  className=\"item\"\n                  src={image}\n                  alt={String(i + 1)}\n                />\n              </li>\n            );\n          })}\n        </ul>\n\n        <button\n          onClick={this.clickPrev}\n          type=\"button\"\n        >\n          Prev\n        </button>\n        <button\n          onClick={this.clickNext}\n          type=\"button\"\n          data-cy=\"next\"\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images?: string[];\n  itemWidth?: number;\n  frameSize?: number;\n  step?: number;\n  animationDuration?: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: true,\n  };\n\n  updateInputValue(value: string, className: string) {\n    const newState = { [className]: +value } as Pick<State, keyof State>;\n\n    this.setState(newState);\n  }\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy={'title'}>Carousel with {images.length} images</h1>\n        <div className=\"input\">\n          <label className=\"input-block\" htmlFor=\"itemId\">\n            Item width\n            <input\n              value={this.state.itemWidth || 130}\n              onChange={(event) => {\n                return this.updateInputValue(event.target.value, 'itemWidth');\n              }}\n              type=\"number\"\n              min=\"100\"\n              max=\"500\"\n              step=\"10\"\n              className=\"itemId\"\n              placeholder=\"Item width\"\n            />\n          </label>\n          <label className=\"input-block\" htmlFor=\"frameId\">\n            Frame size\n            <input\n              value={this.state.frameSize || 3}\n              onChange={(event) => {\n                return this.updateInputValue(event.target.value, 'frameSize');\n              }}\n              type=\"number\"\n              min=\"1\"\n              max={images.length}\n              className=\"frameId\"\n              placeholder=\"Frame size\"\n            />\n          </label>\n\n          <label className=\"input-block\" htmlFor=\"stepId\">\n            Step\n            <input\n              value={this.state.step || 3}\n              onChange={(event) => {\n                return this.updateInputValue(event.target.value, 'step');\n              }}\n              type=\"number\"\n              min=\"1\"\n              max={images.length}\n              className=\"stepId\"\n              placeholder=\"Step\"\n            />\n          </label>\n\n          <label className=\"input-block\" htmlFor=\"animationDuration\">\n            Animation duration\n            <input\n              value={this.state.animationDuration || 1000}\n              onChange={(event) => {\n                return (\n                  this.updateInputValue(event.target.value, 'animationDuration')\n                );\n              }}\n              type=\"number\"\n              min=\"200\"\n              max=\"5000\"\n              step=\"100\"\n              className=\"animationDuration\"\n              placeholder=\"Animation duration\"\n            />\n          </label>\n\n        </div>\n\n        <Carousel\n          images={images}\n          frameSize={frameSize}\n          step={step}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}